public static void copyFileUsingChannel(File source, File dest) throws IOException {
    FileChannel sourceChannel = null;
    FileChannel destChannel = null;
    try {
        sourceChannel = new FileInputStream(source).getChannel();
        destChannel = new FileOutputStream(dest).getChannel();
        destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    } finally {
        if(sourceChannel != null) {
            sourceChannel.close();
        }
        if(destChannel != null) {
            destChannel.close();
        }
    }
}

task copyFiles(type: Copy){
    configurations.myConfig.files.each {file ->

        String preFix = file.getParentFile().getParentFile().getParentFile().getParentFile().getName()
        println(" >>>>>>>>>>>>>>>> " + preFix)

        copyFileUsingChannel(file, new File("/home/dy/src/delta-1/packages/apps/netmon/libs_test/" + preFix + "_" + file.name))
    }
}

task copyLibs(type: Copy) {



    StringBuilder LOCAL_STATIC_JAVA_LIBRARIES = new StringBuilder("LOCAL_STATIC_JAVA_LIBRARIES := ")
    StringBuilder LOCAL_STATIC_JAVA_AAR_LIBRARIES = new StringBuilder("LOCAL_STATIC_JAVA_AAR_LIBRARIES := ")

    StringBuilder AAPT_FLAG = new StringBuilder()

    StringBuilder LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES = new StringBuilder()
    configurations.myConfig.files.forEach() { file ->


        String preFix = file.getParentFile().getParentFile().getParentFile().getParentFile().getName()
        println(" >>>>>>>>>>>>>>>> " + preFix)

        File dstFile = new File("/home/dy/src/delta-1/packages/apps/netmon/libs_test/" + preFix + "_" + file.name)
        copyFileUsingChannel(file, dstFile)


        String name = "netmon_" + dstFile.name.substring(0, dstFile.name.lastIndexOf("."))
        String ext = dstFile.name.substring(dstFile.name.lastIndexOf(".") + 1)

        if ("aar" == ext) {
            LOCAL_STATIC_JAVA_AAR_LIBRARIES.append(name).append(" ")

            extractArchive("../libs_test/" + dstFile.name,"../libs_test/unzip/" )
            //ant.unzip(src: "../libs_test/" + file.name, dest: "libs_test/unzip/", overwrite: 'true')

            Node xmlParser = new XmlParser().parse("libs_test/unzip/AndroidManifest.xml")
            String packageName = xmlParser.attributes().get("package")
            AAPT_FLAG.append("LOCAL_AAPT_FLAGS += --generate-dependencies --auto-add-overlay --extra-packages ").append(packageName).append("\n")

        } else if ("jar" == ext) {
            LOCAL_STATIC_JAVA_LIBRARIES.append(name).append(" ")
        }

        String TMP = "LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES += %s:libs_test/%s"
        String lib = String.format(TMP, name, dstFile.name)
        if (!LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES.contains(lib)){
            LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES.append(lib).append("\n")
        }
    }

    println("#-----------------------------------------------0")
    println(AAPT_FLAG.toString())
    println("#-----------------------------------------------1")
    println(LOCAL_STATIC_JAVA_LIBRARIES.toString())
    println("#-----------------------------------------------2")
    println(LOCAL_STATIC_JAVA_AAR_LIBRARIES.toString())
    println("#-----------------------------------------------3")
    println(LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES.toString())
}


String extractArchive(String archiveName, String out) {

    def archive = file(archiveName)
    def outputDir = file(out)

    println 'Extracting ' + archiveName + ' to ' + outputDir

    if (archive.isFile()) {
        ant.unzip(src: archive, dest: outputDir, overwrite: 'true')
        return outputDir
    }
}
