import java.nio.channels.FileChannel

static boolean debug(){
    return false
}

static void copyFileUsingChannel(File source, File dest) throws IOException {
    FileChannel sourceChannel = null
    FileChannel destChannel = null
    try {
        sourceChannel = new FileInputStream(source).getChannel()
        destChannel = new FileOutputStream(dest).getChannel()
        destChannel.transferFrom(sourceChannel, 0, sourceChannel.size())
    } finally {
        if (sourceChannel != null) {
            sourceChannel.close()
        }
        if (destChannel != null) {
            destChannel.close()
        }
    }
}

String extractArchive(File archive, File outputDir) {

    if (debug()){
        println 'Extracting ' + archive.absolutePath + ' to ' + outputDir
    }

    if (archive.isFile()) {
        ant.unzip(src: archive.absolutePath, dest: outputDir.absolutePath, overwrite: 'true')
        return outputDir
    }
}

void purgeDirectory(File dir) {
    for (File file : dir.listFiles()) {
        if (file.isDirectory()){
            purgeDirectory(file)
        }
        file.delete()
    }
}

project.afterEvaluate {

    // 先清理
    File digDir = new File(projectDir, "dig/")
    if (digDir.exists()){
        purgeDirectory(digDir)
    } else {
        digDir.mkdirs()
    }

    File unzipDir = new File(digDir, "unzip/")
    if (!unzipDir.exists()) {
        unzipDir.mkdirs()
    }

    //https://stackoverflow.com/questions/47910578/not-able-to-copy-configurations-dependencies-after-upgrading-gradle-plugin-for-a
    configurations.implementation.setCanBeResolved(true)
    configurations.api.setCanBeResolved(true)

    task copyFiles(type: Copy) {
        configurations.implementation.files.each { file ->

            if (debug()){
                println(" ----->> implementation jar or aar: " + file.getAbsolutePath())
            }

            if (!file.absolutePath.contains(projectDir.absolutePath)) {
                String preFix = file.getParentFile().getParentFile().getParentFile().getParentFile().getName()
                copyFileUsingChannel(file, new File(digDir, preFix + "_" + file.name))
            }

        }
    }

    task copyLibs(type: Copy) {

        StringBuilder LOCAL_STATIC_JAVA_LIBRARIES = new StringBuilder()
        StringBuilder LOCAL_STATIC_JAVA_AAR_LIBRARIES = new StringBuilder()

        StringBuilder AAPT_FLAG = new StringBuilder()

        StringBuilder LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES = new StringBuilder()
        configurations.implementation.files.forEach() { file ->


            if (!file.absolutePath.contains(projectDir.absolutePath)) {
                String preFix = file.getParentFile().getParentFile().getParentFile().getParentFile().getName()

                File dstFile = new File(digDir, preFix + "_" + file.name)
                copyFileUsingChannel(file, dstFile)


                String name = rootProject.name + "_" + dstFile.name.substring(0, dstFile.name.lastIndexOf("."))
                String ext = dstFile.name.substring(dstFile.name.lastIndexOf(".") + 1)

                if ("aar" == ext) {
                    LOCAL_STATIC_JAVA_AAR_LIBRARIES.append("LOCAL_STATIC_JAVA_AAR_LIBRARIES += ").append(name).append("\n")

                    extractArchive(new File(digDir, dstFile.name), unzipDir)
                    
                    Node xmlParser = new XmlParser().parse(new File(unzipDir, "AndroidManifest.xml"))
                    String packageName = xmlParser.attributes().get("package")
                    AAPT_FLAG.append("LOCAL_AAPT_FLAGS += --generate-dependencies --auto-add-overlay --extra-packages ").append(packageName).append("\n")

                } else if ("jar" == ext) {
                    LOCAL_STATIC_JAVA_LIBRARIES.append("LOCAL_STATIC_JAVA_LIBRARIES += ").append(name).append("\n")
                }

                String lib = String.format("LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES += %s:%s/dig/%s", name, projectDir.name, dstFile.name)
                if (!LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES.contains(lib)) {
                    LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES.append(lib).append("\n")
                }
            }
        }
        // 清理
        purgeDirectory(unzipDir)
        unzipDir.delete()


        println("如果你需要 Android.mk 编译，可以把下面的配置填写上去，一般能顺利编译过")
        println("========== ========== Android.mk ========== ==========")
        println("#AAPT_FLAG")
        println(AAPT_FLAG.toString())
        println("#LOCAL_STATIC_JAVA_LIBRARIES")
        println(LOCAL_STATIC_JAVA_LIBRARIES.toString())
        println("#LOCAL_STATIC_JAVA_AAR_LIBRARIES")
        println(LOCAL_STATIC_JAVA_AAR_LIBRARIES.toString())
        println("#LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES")
        println(LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES.toString().trim())
        println("========== ========== Android.mk ========== ==========\n\n")

        println("所有通过maven依赖的 aar 和 jar 都已经拷贝到 [" + rootProject.name + File.separator + digDir.parentFile.name + File.separator + digDir.name + File.separator + "] 目录中了")
    }


}


